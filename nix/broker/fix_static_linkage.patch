diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5461f8c..563250f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -63,10 +63,15 @@ endif()
 
 # -- Dependencies -------------------------------------------------------------
 
+# OpenSSL
+find_package(OpenSSL REQUIRED)
+set(LINK_LIBS ${LINK_LIBS} OpenSSL::SSL)
+
 if ( CAF_ROOT_DIR )
   find_package(CAF COMPONENTS openssl test io core REQUIRED)
   set(caf_dir    "${CAF_LIBRARY_CORE}")
-  set(caf_config "${CAF_INCLUDE_DIR_CORE}/caf/config.hpp")
+  list(GET CAF_INCLUDE_DIR_CORE 0 caf_core_include)
+  find_file(caf_config "caf/config.hpp" PATHS ${caf_core_include} NO_DEFAULT_PATH)
   get_filename_component(caf_dir ${caf_dir} PATH)
 
   if (EXISTS "${caf_dir}/../libcaf_core")
@@ -313,11 +318,7 @@ if (CAF_VERSION VERSION_LESS ${CAF_VERSION_REQUIRED})
 endif ()
 
 include_directories(BEFORE ${CAF_INCLUDE_DIRS})
-set(LINK_LIBS ${LINK_LIBS} ${CAF_LIBRARIES})
-
-# OpenSSL
-find_package(OpenSSL REQUIRED)
-set(LINK_LIBS ${LINK_LIBS} ${OPENSSL_LIBRARIES})
+set(LINK_LIBS ${LINK_LIBS} CAF::core CAF::io CAF::openssl)
 
 # RocksDB
 find_package(RocksDB)
Submodule cmake contains modified content
diff --git a/cmake/FindCAF.cmake b/cmake/FindCAF.cmake
index 30d75bd..aebaffa 100644
--- a/cmake/FindCAF.cmake
+++ b/cmake/FindCAF.cmake
@@ -2,27 +2,34 @@
 #
 # Use this module as follows:
 #
-#     find_package(CAF [COMPONENTS <core|io|opencl|...>*] [REQUIRED])
+# find_package(CAF [COMPONENTS <core|io|opencl|...>*] [REQUIRED])
 #
 # Variables used by this module (they can change the default behaviour and need
 # to be set before calling find_package):
 #
-#  CAF_ROOT_DIR  Set this variable either to an installation prefix or to wa
-#                CAF build directory where to look for the CAF libraries.
+# CAF_ROOT_DIR  Set this variable either to an installation prefix or to wa CAF
+# build directory where to look for the CAF libraries.
 #
 # Variables defined by this module:
 #
-#  CAF_FOUND              System has CAF headers and library
-#  CAF_VERSION            Found CAF release number
-#  CAF_LIBRARIES          List of library files  for all components
-#  CAF_INCLUDE_DIRS       List of include paths for all components
+# CAF_FOUND              System has CAF headers and library
+# CAF_LIBRARIES          List of library files for all components
+# CAF_INCLUDE_DIRS       List of include paths for all components
+# CAF_LIBRARY_$C         Library file for component $C
+# CAF_INCLUDE_DIR_$C     Include path for component $C
 
-if(CAF_FIND_COMPONENTS STREQUAL "")
+if (CAF_FIND_COMPONENTS STREQUAL "")
   message(FATAL_ERROR "FindCAF requires at least one COMPONENT.")
-endif()
+endif ()
+
+set(suffix "")
+if (NOT BUILD_SHARED_LIBS)
+  set(suffix "_static")
+endif ()
 
 # iterate over user-defined components
 foreach (comp ${CAF_FIND_COMPONENTS})
+  message(STATUS "CAF component: ${comp}")
   # we use uppercase letters only for variable names
   string(TOUPPER "${comp}" UPPERCOMP)
   if ("${comp}" STREQUAL "core")
@@ -34,70 +41,68 @@ foreach (comp ${CAF_FIND_COMPONENTS})
   endif ()
   if (CAF_ROOT_DIR)
     set(header_hints
-        "${CAF_ROOT_DIR}/include"
-        "${CAF_ROOT_DIR}/libcaf_${comp}"
+        "${CAF_ROOT_DIR}/include" "${CAF_ROOT_DIR}/libcaf_${comp}"
         "${CAF_ROOT_DIR}/../libcaf_${comp}"
         "${CAF_ROOT_DIR}/../../libcaf_${comp}")
   endif ()
-  find_path(CAF_INCLUDE_DIR_${UPPERCOMP}
-            NAMES
-              ${HDRNAME}
-            HINTS
-              ${header_hints}
-              /usr/include
-              /usr/local/include
-              /opt/local/include
-              /sw/include
-              ${CMAKE_INSTALL_PREFIX}/include
-              ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR})
+  find_path(
+    CAF_INCLUDE_DIR_${UPPERCOMP}
+    NAMES ${HDRNAME}
+    HINTS ${header_hints} /usr/include /usr/local/include /opt/local/include
+          /sw/include ${CMAKE_INSTALL_PREFIX}/include)
   mark_as_advanced(CAF_INCLUDE_DIR_${UPPERCOMP})
-  if (NOT "${CAF_INCLUDE_DIR_${UPPERCOMP}}"
-      STREQUAL "CAF_INCLUDE_DIR_${UPPERCOMP}-NOTFOUND")
+  message(STATUS "is ${CAF_INCLUDE_DIR_${UPPERCOMP}}")
+  if (NOT "${CAF_INCLUDE_DIR_${UPPERCOMP}}" STREQUAL
+      "CAF_INCLUDE_DIR_${UPPERCOMP}-NOTFOUND")
     # mark as found (set back to false when missing library or build header)
     set(CAF_${comp}_FOUND true)
     # check for CMake-generated build header for the core component
     if ("${comp}" STREQUAL "core")
-      find_path(caf_build_header_path
-                NAMES
-                  caf/detail/build_config.hpp
-                HINTS
-                  ${header_hints}
-                  /usr/include
-                  /usr/local/include
-                  /opt/local/include
-                  /sw/include
-                  ${CMAKE_INSTALL_PREFIX}/include
-                  ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR})
+      # read content of config.hpp
+      file(READ "${CAF_INCLUDE_DIR_CORE}/caf/config.hpp" CONFIG_HPP)
+      # get line containing the version
+      string(REGEX MATCH "#define CAF_VERSION [0-9]+" VERSION_LINE
+                   "${CONFIG_HPP}")
+      # extract version number from line
+      string(REGEX MATCH "[0-9]+" VERSION_INT "${VERSION_LINE}")
+      # calculate major, minor, and patch version
+      math(EXPR CAF_VERSION_MAJOR "${VERSION_INT} / 10000")
+      math(EXPR CAF_VERSION_MINOR "( ${VERSION_INT} / 100) % 100")
+      math(EXPR CAF_VERSION_PATCH "${VERSION_INT} % 100")
+      # create full version string
+      set(CAF_VERSION
+          "${CAF_VERSION_MAJOR}.${CAF_VERSION_MINOR}.${CAF_VERSION_PATCH}")
+      find_path(
+        caf_build_header_path
+        NAMES caf/detail/build_config.hpp
+        HINTS ${header_hints} /usr/include /usr/local/include
+              /opt/local/include /sw/include ${CMAKE_INSTALL_PREFIX}/include)
       if ("${caf_build_header_path}" STREQUAL "caf_build_header_path-NOTFOUND")
         message(WARNING "Found all.hpp for CAF core, but not build_config.hpp")
         set(CAF_${comp}_FOUND false)
-      else()
-        list(APPEND CAF_INCLUDE_DIRS "${caf_build_header_path}")
-      endif()
-    endif()
+      else ()
+        list(APPEND CAF_INCLUDE_DIR_${UPPERCOMP} "${caf_build_header_path}")
+      endif ()
+    endif ()
+    message(STATUS "CAF component: ${comp} found")
     list(APPEND CAF_INCLUDE_DIRS "${CAF_INCLUDE_DIR_${UPPERCOMP}}")
     # look for (.dll|.so|.dylib) file, again giving hints for non-installed CAFs
     # skip probe_event as it is header only
     if (NOT ${comp} STREQUAL "probe_event" AND NOT ${comp} STREQUAL "test")
       if (CAF_ROOT_DIR)
         set(library_hints "${CAF_ROOT_DIR}/lib")
+        message(STATUS "library_hints: ${library_hints}")
       endif ()
-      find_library(CAF_LIBRARY_${UPPERCOMP}
-                   NAMES
-                     "caf_${comp}"
-                     "caf_${comp}_static"
-                   HINTS
-                     ${library_hints}
-                     /usr/lib
-                     /usr/local/lib
-                     /opt/local/lib
-                     /sw/lib
-                     ${CMAKE_INSTALL_PREFIX}/lib
-                     ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}
-                     ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/${CMAKE_BUILD_TYPE})
+      find_library(
+        CAF_LIBRARY_${UPPERCOMP}
+        NAMES "caf_${comp}${suffix}"
+        HINTS ${library_hints} /usr/lib /usr/local/lib /opt/local/lib /sw/lib
+              ${CMAKE_INSTALL_PREFIX}/lib)
+      message(STATUS "CAF component lib: ${comp}${suffix}")
       mark_as_advanced(CAF_LIBRARY_${UPPERCOMP})
-      if ("${CAF_LIBRARY_${UPPERCOMP}}"
-          STREQUAL "CAF_LIBRARY_${UPPERCOMP}-NOTFOUND")
+      message(STATUS "${CAF_LIBRARY_${UPPERCOMP}}")
+      if ("${CAF_LIBRARY_${UPPERCOMP}}" STREQUAL
+          "CAF_LIBRARY_${UPPERCOMP}-NOTFOUND")
         set(CAF_${comp}_FOUND false)
       else ()
         set(CAF_LIBRARIES ${CAF_LIBRARIES} ${CAF_LIBRARY_${UPPERCOMP}})
@@ -108,37 +113,81 @@ endforeach ()
 
 if (DEFINED CAF_INCLUDE_DIRS)
   list(REMOVE_DUPLICATES CAF_INCLUDE_DIRS)
-endif()
-
-
-if (NOT CAF_INCLUDE_DIR_CORE STREQUAL "CAF_INCLUDE_DIR_CORE-NOTFOUND")
-  # read content of config.hpp
-  file(READ "${CAF_INCLUDE_DIR_CORE}/caf/config.hpp" CONFIG_HPP)
-  # get line containing the version
-  string(REGEX MATCH "#define CAF_VERSION [0-9]+" VERSION_LINE "${CONFIG_HPP}")
-  # extract version number from line
-  string(REGEX MATCH "[0-9]+" VERSION_INT "${VERSION_LINE}")
-  # calculate major, minor, and patch version
-  math(EXPR CAF_VERSION_MAJOR "${VERSION_INT} / 10000")
-  math(EXPR CAF_VERSION_MINOR "( ${VERSION_INT} / 100) % 100")
-  math(EXPR CAF_VERSION_PATCH "${VERSION_INT} % 100")
-  # create full version string
-  set(CAF_VERSION "${CAF_VERSION_MAJOR}.${CAF_VERSION_MINOR}.${CAF_VERSION_PATCH}")
-  if (NOT CAF_VERSION)
-    unset(CAF_VERSION)
-    message(WARNING "Unable to determine CAF version")
-  endif ()
 endif ()
 
 # let CMake check whether all requested components have been found
 include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(CAF
-                                  FOUND_VAR CAF_FOUND
-                                  REQUIRED_VARS CAF_VERSION CAF_LIBRARIES CAF_INCLUDE_DIRS
-                                  HANDLE_COMPONENTS)
+find_package_handle_standard_args(
+  CAF
+  REQUIRED_VARS
+  CAF_LIBRARIES
+  CAF_INCLUDE_DIRS
+  VERSION_VAR
+  CAF_VERSION
+  HANDLE_COMPONENTS)
+
+if (NOT CAF_FOUND)
+  unset(CAF_LIBRARIES)
+  unset(CAF_INCLUDE_DIRS)
+endif ()
 
 # final step to tell CMake we're done
-mark_as_advanced(CAF_ROOT_DIR
-                 CAF_VERSION
-                 CAF_LIBRARIES
-                 CAF_INCLUDE_DIRS)
+mark_as_advanced(CAF_ROOT_DIR CAF_LIBRARIES CAF_INCLUDE_DIRS)
+
+if (CAF_FOUND)
+  include(CMakeFindDependencyMacro)
+  message(STATUS "CREATING CAF TARGETS")
+  if (CAF_core_FOUND AND NOT TARGET CAF::core)
+    add_library(CAF::core UNKNOWN IMPORTED GLOBAL)
+    set_target_properties(
+      CAF::core
+      PROPERTIES
+        IMPORTED_LOCATION "${CAF_LIBRARY_CORE}" INTERFACE_INCLUDE_DIRECTORIES
+                                                "${CAF_INCLUDE_DIR_CORE}")
+  endif ()
+  if (CAF_io_FOUND AND NOT TARGET CAF::io)
+    find_dependency(Threads)
+    add_library(CAF::io UNKNOWN IMPORTED GLOBAL)
+    set_target_properties(
+      CAF::io
+      PROPERTIES
+        IMPORTED_LOCATION "${CAF_LIBRARY_IO}"
+        INTERFACE_INCLUDE_DIRECTORIES "${CAF_INCLUDE_DIR_IO}"
+        INTERFACE_LINK_LIBRARIES "CAF::core;Threads::Threads")
+  endif ()
+  if (CAF_openssl_FOUND AND NOT TARGET CAF::openssl)
+    add_library(CAF::openssl UNKNOWN IMPORTED GLOBAL)
+    set_target_properties(
+      CAF::openssl
+      PROPERTIES
+        IMPORTED_LOCATION "${CAF_LIBRARY_OPENSSL}"
+        INTERFACE_INCLUDE_DIRECTORIES "${CAF_INCLUDE_DIR_OPENSSL}"
+        INTERFACE_LINK_LIBRARIES "CAF::core;CAF::io")
+    if (NOT BUILD_SHARED_LIBS)
+      set(OPENSSL_USE_STATIC_LIBS TRUE)
+      find_dependency(OpenSSL)
+      set_property(
+        TARGET CAF::openssl
+        APPEND
+        PROPERTY INTERFACE_LINK_LIBRARIES "OpenSSL::SSL")
+    endif ()
+  endif ()
+  if (CAF_opencl_FOUND AND NOT TARGET CAF::opencl)
+    add_library(CAF::opencl UNKNOWN IMPORTED GLOBAL)
+    set_target_properties(
+      CAF::opencl
+      PROPERTIES
+        IMPORTED_LOCATION "${CAF_LIBRARY_OPENCL}"
+        INTERFACE_INCLUDE_DIRECTORIES "${CAF_INCLUDE_DIR_OPENCL}"
+        INTERFACE_LINK_LIBRARIES "CAF::core")
+  endif ()
+  if (CAF_test_FOUND AND NOT TARGET CAF::test)
+    add_library(CAF::test INTERFACE IMPORTED GLOBAL)
+    set_target_properties(
+      CAF::test
+      PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${CAF_INCLUDE_DIR_TEST}"
+
+        INTERFACE_LINK_LIBRARIES "CAF::core")
+  endif ()
+endif ()

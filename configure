#!/bin/sh
# Convenience wrapper for easily viewing/setting options that
# the project's CMake scripts will recognize

command="$0 $*"
sourcedir="$( cd "$( dirname "$0" )" && pwd )"
type cmake > /dev/null 2>&1 || {
    echo "\
This package requires CMake, please install it first, then you may
use this configure script to access CMake equivalent functionality.\
" >&2;
    exit 1;
}

usage="\
Usage: $0 [OPTION]... [VAR=VALUE]...

  Build options:
    --build-type=DIR        CMake build type [RelWithDebInfo]
    --build-dir=DIR         place build files in directory [build]
    --log-level=LEVEL       maximum compile-time log level [verbose]
    --generator=GENERATOR   CMake generator to use (see cmake --help)

  Installation directories:
    --prefix=PREFIX         installation directory [/usr/local]

  Optional features:
    --enable-debug          compile in debugging mode
    --enable-tcmalloc       link against tcmalloc (requires gperftools)
    --enable-asan           enable AddressSanitizer (Clang x86_64 only)

  Required packages in non-standard locations:
    --with-caf=PATH         path to CAF install root
    --with-boost=PATH       path to Boost install root

  Optional packages in non-standard locations:
    --with-editline=PATH    path to editline install root
    --with-perftools=PATH   path to gperftools install root
    --with-pcap=PATH        path to libpcap install root
    --with-broccoli=PATH    path to Broccoli install root
    --with-doxygen=PATH     path to Doxygen install root

  Packaging options (for developers):
    --binary-package        toggle special logic for binary packaging
    --ignore-dirs=PATHS     paths to ignore when creating source package
                            (semicolon delimited and quoted when multiple)
    --pkg-name-prefix=NAME  use the given name as the package prefix instead
                            of the default CMake project name
    --osx-sysroot=PATH      path to the OS X SDK to compile against
    --osx-min-version=VER   minimum OS X version (the deployment target)
"


# Function to append a CMake cache entry definition to the
# CMakeCacheEntries variable
#   $1 is the cache entry variable name
#   $2 is the cache entry variable type
#   $3 is the cache entry variable value
append_cache_entry ()
{
  CMakeCacheEntries="$CMakeCacheEntries -D $1:$2=$3"
}

levelize()
{
  case "$1" in
    quiet)
      echo 0
      ;;
    error)
      echo 1
      ;;
    warn)
      echo 2
      ;;
    info)
      echo 3
      ;;
    verbose)
      echo 4
      ;;
    debug)
      echo 5
      ;;
    trace)
      echo 6
      ;;
    *)
      echo "invalid log level specification, use:"
      echo "  quiet|error|warn|info|verbose|debug|trace"
      exit 1;
  esac
}

# Set defaults
builddir=build
CMakeCacheEntries=""
append_cache_entry CMAKE_BUILD_TYPE       STRING    RelWithDebInfo
append_cache_entry CMAKE_INSTALL_PREFIX   PATH      /usr/local/vast
append_cache_entry VAST_LOG_LEVEL         INTEGER   $(levelize debug)
append_cache_entry ENABLE_DEBUG           BOOL      false
append_cache_entry ENABLE_PERFTOOLS_HEAP  BOOL      false
append_cache_entry CPACK_SOURCE_IGNORE_FILES STRING

# parse arguments
while [ $# -ne 0 ]; do
    case "$1" in
        -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *) optarg= ;;
    esac

    case "$1" in
        --help|-h)
            echo "${usage}" 1>&2
            exit 1
            ;;
        --build-dir=*)
            builddir=$optarg
            ;;
        --build-type=*)
            append_cache_entry CMAKE_BUILD_TYPE STRING $optarg
            ;;
        --generator=*)
            CMakeGenerator="$optarg"
            ;;
        --log-level=*)
            append_cache_entry VAST_LOG_LEVEL INTEGER $(levelize $optarg)
            ;;
        --prefix=*)
            append_cache_entry VAST_PREFIX PATH $optarg
            append_cache_entry CMAKE_INSTALL_PREFIX PATH $optarg
            ;;
        --enable-debug)
            append_cache_entry VAST_LOG_LEVEL INTEGER $(levelize trace)
            append_cache_entry ENABLE_DEBUG BOOL true
            ;;
        --enable-tcmalloc)
            append_cache_entry ENABLE_PERFTOOLS_HEAP BOOL true
            ;;
        --enable-asan)
            append_cache_entry ENABLE_ADDRESS_SANITIZER BOOL true
            ;;
        --with-caf=*)
            append_cache_entry CAF_ROOT_DIR PATH $optarg
            ;;
        --with-boost=*)
            append_cache_entry BOOST_ROOT PATH $optarg
            ;;
        --with-doxygen=*)
            append_cache_entry Doxygen_ROOT_DIR PATH $optarg
            ;;
        --with-pcap=*)
            append_cache_entry PCAP_ROOT_DIR PATH $optarg
            ;;
        --with-broccoli=*)
            append_cache_entry Broccoli_ROOT_DIR PATH $optarg
            ;;
        --with-editline=*)
            append_cache_entry EDITLINE_ROOT_DIR PATH $optarg
            ;;
        --with-perftools=*)
            append_cache_entry Gperftools_ROOT_DIR PATH $optarg
            ;;
        --binary-package)
            append_cache_entry BINARY_PACKAGING_MODE BOOL true
            ;;
        --ignore-dirs=*)
            append_cache_entry CPACK_SOURCE_IGNORE_FILES STRING $optarg
            ;;
        --pkg-name-prefix=*)
            append_cache_entry PACKAGE_NAME_PREFIX STRING $optarg
            ;;
        --osx-sysroot=*)
            append_cache_entry CMAKE_OSX_SYSROOT PATH $optarg
            ;;
        --osx-min-version=*)
            append_cache_entry CMAKE_OSX_DEPLOYMENT_TARGET STRING $optarg
            ;;
        *)
            echo "Invalid option '$1'.  Try $0 --help to see available options."
            exit 1
            ;;
    esac
    shift
done

if [ -d $builddir ]; then
    # If build directory exists, check if it has a CMake cache
    if [ -f $builddir/CMakeCache.txt ]; then
        # If the CMake cache exists, delete it so that this configuration
        # is not tainted by a previous one
        rm -f $builddir/CMakeCache.txt
    fi
else
    # Create build directory
    mkdir -p $builddir
fi

cd $builddir

if [ -n "$CMakeGenerator" ]; then
    cmake -G "$CMakeGenerator" $CMakeCacheEntries $sourcedir
else
    cmake $CMakeCacheEntries $sourcedir
fi

echo "# This is the command used to configure this build" > config.status
if [ -n "$CC" ]; then
  printf "CC=%s" $CC >> config.status
  printf ' ' >> config.status
fi
if [ -n "$CXX" ]; then
  printf "CXX=%s" $CXX >> config.status
  printf ' ' >> config.status
fi
if [ -n "$CXXFLAGS" ]; then
  printf "CXXFLAGS=%s" $CXXFLAGS >> config.status
  printf ' ' >> config.status
fi
echo $command >> config.status
chmod u+x config.status

printf "DIRS := %s\n\n" $builddir > $sourcedir/Makefile
makefile=$(cat <<'EOT'
all:
	@for i in $(DIRS); do $(MAKE) -C $$i $@; done

test:
	@for i in $(DIRS); do $(MAKE) -C $$i $@; done

install:
	@for i in $(DIRS); do $(MAKE) -C $$i $@; done

uninstall:
	@for i in $(DIRS); do $(MAKE) -C $$i $@; done

clean:
	@for i in $(DIRS); do $(MAKE) -C $$i $@; done

distclean:
	rm -rf $(DIRS) Makefile

.PHONY: all test install uninstall clean distclean
EOT
)

echo "$makefile" >> $sourcedir/Makefile

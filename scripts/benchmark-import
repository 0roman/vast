#!/bin/sh
#
# This script facilitates benchmarking the throughput of event import.
#

# Static defaults.
aspect=bro
dir=$(pwd)

# Matrix defaults.
cores=1,2,4
throughputs=0
batches=131072
parts=1
runs=1

# Abort on error
set -e

usage() {
  printf "usage: %s [options] <file>\n" $(basename $0)
  echo
  echo 'static options:'
  echo "    -a <aspect>   benchmark aspect [$aspect]"
  echo "    -d <dir>      directory to save benchmarks in [$dir]"
  echo "    -f            overwrite already existing run"
  echo "    -h|-?         display this help"
  echo "    -l            keep only the logs and delete the VAST directory"
  echo "    -s            enable CAF scheduler profiling"
  echo "    -t            wrap invocation in time(1)"
  echo
  echo 'matrix options (comma-separated):'
  echo "    -b <batches>    batch sizes [$batches]"
  echo "    -c <cores>      CAF scheduler threads [$cores]"
  echo "    -m <messages>   CAF scheduler message throughput [$throughputs]"
  echo "    -r <runs>       runs [$runs]"
  echo "    -p <partitions> active INDEX partitions  [$parts]"
  echo
}

log() {
  echo -e $(date '+%F %H:%M:%S') "$*"
}

while getopts "a:b:c:d:flm:p:r:sth?" opt; do
  case "$opt" in
    a)
      aspect=$OPTARG
      ;;
    b)
      batches=$OPTARG
      ;;
    c)
      cores=$OPTARG
      ;;
    d)
      dir=$OPTARG
      ;;
    f)
      force=1
      ;;
    l)
      logs=1
      ;;
    m)
      throughputs=$OPTARG
      ;;
    p)
      parts=$OPTARG
      ;;
    r)
      runs=$OPTARG
      ;;
    s)
      profiler=1
      ;;
    t)
      time=1
      ;;
    h|\?)
      usage
      exit 0
    ;;
  esac
done

if ! which vast > /dev/null 2>&1; then
  log "could not find vast executable"
  exit 1
fi

shift $(expr $OPTIND - 1)
input=$1

if [ -z "$input" ] ; then
  usage
  exit 1
fi

if [ "$aspect" == "test" ]; then
  if [ -z "$input" ]; then
    log "no schema provided"
    exit 1
  fi
elif ! [ -f "$input" ] ; then
  log "no such file: $input"
  exit 1
fi

if [ "$(pwd)" != "$dir" ]; then
  log "entering directory $dir"
  cd $dir
fi

comma_split() {
  precision=$1
  awk -v RS=, "{ printf \"%.${precision}u\\n\", \$0 }"
}


# Awk script to post-process output of "/usr/bin/time -l -p" so that it becomes
# more parseable.
time_postprocess='{ \
  if (NR <= 3) \
    print $2 "\t" $1; \
  else \
    print $1 "\t" substr($0, index($0,$2)); \
}'

for core in $(printf $cores | comma_split 3 ); do
  for throughput in $(printf $throughputs | comma_split 6); do
    for batch in $(printf $batches | comma_split 8); do
      for part in $(printf $parts | comma_split 2); do
        for run in $(seq 1 $runs); do
          tag="$aspect-C-$core-T-$throughput-B-$batch-P-$part-R-$run"
          workdir="vast-$tag"
          # Check if a trace exists already.
          existing=
          if [ -d $workdir ]; then
            existing=$workdir
          elif [ -f $workdir.accounting.log ]; then
            existing=$workdir.accounting.log
          fi
          if [ -z "$force" ] && [ -n "$existing" ]; then
            log "skipping $existing"
          else
            log "running  $workdir"
            # Build VAST command line.
            args="-C -l 5 -t $core -d $workdir"
            args="$args --index-active=$part"
            if [ "$throughput" != "000000" ]; then
              args="$args -m $throughput"
            fi
            if [ -n "$profiler" ]; then
              args="$args -p $workdir.caf.log"
            fi
            if [ "$aspect" = "bro" ]; then
              args="$args import bro"
            elif [ "$aspect" = "pcap" ]; then
              args="$args import pcap"
            elif [ "$aspect" = "test" ]; then
              args="$args import test -e 10000000"
            fi
            args="$args -b $batch"
            mkdir -p "$workdir"
            if [ "$aspect" = "test" ] ; then
              echo $input > $workdir/benchmark-schema
              args="$args -r $workdir/benchmark-schema"
            else
              args="$args -r \"$input\""
            fi
            vast="vast $args > $workdir/stdout 2> $workdir/stderr"
            if [ -n "$time" ]; then
              vast="/usr/bin/time -l -p -o $workdir/time $vast"
            fi
            # Upon CTRL+C, delete the current working directory.
            terminate="printf \"\nremoving incomplete run: $workdir\n\";"
            terminate="$terminate rm -rf $workdir* && exit 1 || kill -2 $$"
            trap "$terminate" SIGINT SIGTERM
            # Run VAST.
            eval $vast
            # Make logs more accessible.
            logdir=$workdir/log/$(ls $workdir/log/)
            if [ -f $logdir/accounting.log ]; then
              # Run may be too short for log to be produced.
              cp $logdir/accounting.log $workdir.accounting.log
            fi
            cp $workdir/stderr $workdir.stderr.log
            if [ -n "$time" ]; then
              awk "$time_postprocess" $workdir/time > $workdir.time.log
            fi
            # Remove working directory.
            if [ -n "$logs" ]; then
              rm -rf $workdir
            fi
          fi
        done
      done
    done
  done
done

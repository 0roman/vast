#!/bin/sh
#
# This script facilitates bulk processing of PCAP traces with Bro.
#

umask 117

logs=$(pwd)
bro=$(which bro 2> /dev/null)
args='-C local'

usage()
{
  printf "usage: %s [options] <traces>\n" $(basename $0)
  echo ''
  echo 'options:'
  echo "    -a <args>   arguments passed to bro [$args]"
  echo "    -b <bro>    the bro binary to use [$bro]"
  echo "    -c          compress logs after running bro"
  echo '    -d          delete logs after export (only effective with -e)'
  echo '    -e <remote> export bro logs to remote host after processing'
  echo '    -i          treat <traces> as remote location and fetch in advance'
  echo '    -f          reprocess already existing bro logs'
  echo '    -h|-?       display this help'
  echo '    -l <file>   path to log file [/dev/null]'
  echo "    -t <dir>    directory where to store the temporary logs [$logs]"
  echo ''
}

log()
{
  echo -e $(date '+%F %H:%M:%S') "$*" | tee -a $logfile
}

while getopts "a:b:cde:fhil:t:?" opt; do
  case "$opt" in
    a)
      args=$OPTARG
      ;;
    b)
      bro=$OPTARG
      ;;
    c)
      compress=1
      ;;
    d)
      delete=1
      ;;
    e)
      remote=$OPTARG
      ;;
    f)
      force=1
      ;;
    i)
      import=1
      ;;
    l)
      logfile=$OPTARG
      ;;
    t)
      logs=$OPTARG
      ;;
    h|\?)
      usage
      exit 0
    ;;
  esac
done

if [ -z $bro ] || ! [ -x $bro ]; then
  log "could not find bro executable in PATH"
  exit 1
fi

if [ -z $logfile ]; then
  logfile=$logs/brocess.log
fi

shift $(expr $OPTIND - 1)
traces=$*

if [ ! -d $logs ]; then
  log "not a directory: $logs"
  exit 1
fi

if [ -z "$traces" ]; then
  usage
  exit 1
fi

echo '####################################################' >> $logfile
log "logging to $logfile"

if [ "$(pwd)" != "$logs" ]; then
  log "entering directory $logs"
  cd $logs
fi

if [ "$import" == 1 ]; then
  spool=$logs/spool
  mkdir -m 700 -p $spool
  log "fetching remote trace(s) $traces to $spool"
  scp -r -q -c arcfour $traces $spool
  if [ $? != 0 ]; then
    log "experienced error fetching traces"
    exit 1
  fi
  chmod 600 $spool/*
  traces=$(ls $spool/*)
fi

for trace in $traces; do
  if [ ! -f $trace ]; then
    log "no such file: $trace"
    continue
  fi

  base=$(basename $trace)
  if [ -d "$base" ]; then
    if [ "$force" == "1" ]; then
      log "reprocessing $base"
      rm -rf $base
    else
      log "$base already exists, skipping"
      continue
    fi
  fi

  mkdir -m 770 $base
  cd $base
  log "running: bro -r $trace $args"
  echo '----------------=[ starting Bro ]=----------------' >> $logfile 2>&1
  $bro -r $trace $args >> $logfile 2>&1
  rc=$?
  echo '----------------=[ stopping Bro ]=----------------' >> $logfile 2>&1
  if [ $rc != 0 ]; then
    log "bro experienced errors while processing trace $trace"
    exit 1
  fi
  if [ "$compress" != "0" ]; then
    uncompressed=$(du -sch *.log | tail -n 1 | cut -f 1)
    log "compressing logs"
    for brolog in *.log; do
      before=$(du -sh $brolog | cut -f 1)
      gzip --best $brolog
      after=$(du -sh $brolog.gz | cut -f 1)
      log "compressed $brolog: $before -> $after"
    done
    compressed=$(du -sch *.gz | tail -n 1 | cut -f 1)
    log "compressed all logs: $uncompressed -> $compressed"
  fi
  cd ..

  if [ -n "$remote" ]; then
    size=$(du -sh $base | cut -f 1)
    log "copying logs $base ($size) to $remote"
    if ! scp -c arcfour -r $base $remote; then
      log "failed to copy $base to $remote"
      exit 1
    elif [ "$delete" != "0" ]; then
      log "deleting $base"
      rm -rf $base
    fi
  fi
done

if [ "$import" == 1 ]; then
  log "deleting imported traces in $spool"
  rm -rf $spool
fi

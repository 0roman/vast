fixtures:
  BiTopologyTester:
    enter: | # python
      node0 = Server(self.cmd,
                     ['-e', ':{}'.format(VAST_PORT),
                      '-i', 'node0', 'start'],
                     work_dir, name='node0', port=VAST_PORT)
      node1 = Server(self.cmd,
                     ['-e', ':{}'.format(42124),
                      '-i', 'node1', 'start'],
                     work_dir, name='node1', port=42124)
      cmd += ['-e', ':{}'.format(VAST_PORT)]

    exit: | # python
      node0.stop()
      node1.stop()

  ServerTester:
    enter: | # python
      node = Server(self.cmd,
                    ['-e', ':{}'.format(VAST_PORT),
                     '-i', 'node', 'start'],
                    work_dir, name='node', port=VAST_PORT)
      cmd += ['-e', ':{}'.format(VAST_PORT)]


    exit: | # python
      node.stop()


tests:
  Node Zeek conn log:
    tags: [node, import-export, zeek]
    steps:
      - command: import -n -b zeek
        input: data/zeek/conn.log.gz
      - command: export -n ascii 'resp_h == 192.168.1.104'
        reference: reference/conn_export_1.ascii
  Node Zeek multiple imports:
    tags: [node, import-export, zeek]
    steps:
      - command: import -n -b zeek
        input: data/zeek/conn.log.gz
      - command: import -n -b zeek
        input: data/zeek/dns.log.gz
      - command: export -n ascii 'resp_h == 192.168.1.104'
        reference: reference/zeek_logs.ascii
  Node Zeek dns log:
    tags: [node, import-export, zeek]
    steps:
      - command: import -n -b zeek
        input: data/zeek/dns.log.gz
      - command: export -n ascii 'resp_h == 192.168.1.104'
        reference: reference/dns_export_1.ascii
  Node Zeek http log:
    tags: [node, import-export, zeek]
    steps:
      - command: import -n -b zeek
        input: data/zeek/http.log.gz
      - command: export -n ascii 'resp_h == 216.240.189.196'
        reference: reference/http_export_1.ascii
  Node Zeek snmp log:
    tags: [node, import-export, zeek]
    steps:
      - command: import -n zeek
        input: data/zeek/snmp.log.gz
      - command: export -n ascii 'duration >= 3s'
        reference: reference/zeek_snmp.ascii
  Node Basic mrt:
    tags: [node, import-export, mrt, disabled]
    steps:
      - command: import -n -b mrt
        input: data/mrt/updates.20180530.0000.gz
      - command: export -n ascii '114.215.46.175 in prefix'
        reference: reference/empty.file

  Server Zeek conn log:
    tags: [server, import-export, zeek]
    fixture: ServerTester
    steps:
      - command: import -b zeek
        input: data/zeek/conn.log.gz
      - command: export ascii 'resp_h == 192.168.1.104'
        reference: reference/conn_export_1.ascii
  Server Basic mrt:
    tags: [server, import-export, mrt, disabled]
    fixture: ServerTester
    steps:
      - command: import -b mrt
        input: data/mrt/updates.20180530.0000.gz
      - command: export ascii '114.215.46.175 in prefix'
        reference: reference/empty.file
  Server Basic bgpdump:
    tags: [server, import-export, bgpdump, disabled]
    fixture: ServerTester
    steps:
      - command: import -b bgpdump
        input: data/bgpdump/updates.20180530.bgpdump.gz
      - command: export ascii '114.215.46.175 in prefix'
        reference: reference/empty.file
  Query Operators:
    tags: [server, operator]
    fixture: ServerTester
    steps:
      - command: import -b zeek
        input: data/zeek/conn.log.gz
      - command: export ascii 'conn.duration <= 1.0s'
        reference: reference/empty.file
      - command: export ascii 'duration >= 10.0s'
        reference: reference/empty.file
      - command: export ascii 'duration < 2.0s'
        reference: reference/empty.file
      - command: export ascii 'service  == "smtp"'
        reference: reference/zeek_smtp.ascii
      - command: export ascii 'missed_bytes  != 0'
        reference: reference/zeek_missed.ascii
      - command: export ascii 'id.orig_h !in 192.168.1.0/24'
        reference: reference/in_subnet.ascii
      - command: export ascii 'id.orig_h in fe80:5074:1b53:7e7::/64'
        reference: reference/empty.file
      - command: export ascii 'id.orig_h ni fe80:5074:1b53:7e7::/64'
        reference: reference/empty.file
  Type Query:
    tags: [server, type, disabled, ch4805]
    fixture: ServerTester
    steps:
      - command: import -b zeek
        input: data/zeek/conn.log.gz
      - command: export zeek '&type == "zeek::conn"'
        reference: data/zeek/conn.log.gz

  Manual 1:
    condition: 'import -h 2>&1 | grep -q pcap'
    tags: [examples, disabled]
    fixture: ServerTester
    steps:
      - command: import -b pcap
        input: data/pcap/example.pcap.gz
      - command: export ascii ':addr in 192.168.168.0/24'
        reference: reference/example_pcap.ascii
      - command: export pcap 'sport > 60000/tcp && src !in 192.168.168.0/8'
        reference: reference/empty.file

  Manual 1 node:
    condition: 'import -h 2>&1 | grep -q pcap'
    tags: [examples, disabled]
    steps:
      - command: import -n -b pcap
        input: data/pcap/example.pcap.gz
      - command: export -n ascii ':addr in 192.168.168.0/24'
        reference: reference/example_pcap.ascii
      - command: export -n pcap 'sport > 60000/tcp && src !in 192.168.168.0/8'
        reference: reference/empty.file

  Manual 2:
    tags: [examples, disabled]
    fixture: BiTopologyTester
    steps:
      - command: peer 'localhost:42124'
      - command: status
        reference: reference/peer0.ref

  Multi addr query:
    tags: [import-export, zeek]
    steps:
      - command: import -n -b zeek
        input: data/zeek/conn.log.gz
      - command: export -n ascii
        input: queries/multi_addr.txt
        reference: reference/multi_addr.ascii

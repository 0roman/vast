
                             _    _____   ___________
                            | |  / /   | / ___/_  __/
                            | | / / /| | \__ \ / /
                            | |/ / ___ |___/ // /
                            |___/_/  |_/____//_/


This files specifies the coding style of the source code. In general, the style
style resembles the Boost style, so unless otherwise noted please refer to
mature Boost libraries, such as Asio or Spirit.

Scoping
=======

- We do not allow static or global variables of class type since they can cause
  debugging nightmares and have an indetermine order of construction and
  destruction. If it is necessary to have global class type variable, declare a
  raw pointer in the corresponding module and allocate (but never free) it in
  program.cc. For example:

    program.cc:

        namespace vast {

        util::logger* LOGGER;

        }

    util/logger.h:

        namespace vast {

        namespace util {
        class logger;
        }

        extern util::logger* LOGGER;

        }

Header
======

- Header filenames end in *.h and implementation filenames in *.cc.

- All header files should use #define guards to prevent multiple inclusion. The
  format of the symbol name should be VAST_<PATH>_<TO>_<FILE>_H.

- Don't use #include when a forward declarations suffices. It can make sense to
  outsource forward declarations into a separate file per module. The file name
  should be <MODULE>/forward.h.

- Include order is from low-level to high-level headers, e.g.,

    #include <memory>

    #include <boost/operators.hpp>

    #include "util/logger.h"
    #include "util/profiler.h"

  Within each section the order should be alphabetical. VAST includes should
  always be in doublequotes and relative to the source directory, whereas
  system-wide includes in angle brackets.

  The top-level include of an implementation file is always the header file.
  Aftewards, the above order applies again. For example,

    #include "meta/event.h"

    #include <functional>

- When declaring a function, the order of parameters is: inputs, then outputs.

Naming
======

- Types and variables should be nouns, while functions should be "command"
  verbs.

- Global variables and macro names should be capitalized, e.g., LOGGER.

- All macros should start with VAST_ to avoid potential clashes with external
  libraries.

- The names of (i) classes/structs, (ii) functions, and (iii) enums should be
  lower case and delimited by underscores.

- The name of implementation namespaces is "detail," e.g.,

    vast::meta::detail::some_impl_specific_to_meta

Comments
========

- Doxygen comments (which are stripped during the generation of the
  documentation) start with ///.

- Use \cmd rather than @cmd for Doxygen commands.

- Use // or /* and */ to define basic comments that should not be swallowed by
  Doxygen.


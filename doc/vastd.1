.TH VASTD 1 "May 27, 2015" 0.1 "Visibility Across Space and Time"
.SH NAME
.PP
\fB\fCvastd\fR \-\- VAST daemon
.SH SYNOPSIS
.PP
\fB\fCvastd\fR [\fIoptions\fP]
.SH OVERVIEW
.PP
VAST is a distributed platform for large\-scale network forensics. It's modular
system architecture is exclusively implemented in terms of the actor model. In
this model, concurrent entities (actors) execute in parallel and
communicate asynchronously solely via message passing. Users spawn system
components as actors and connect them together to create a custom system
topology.
.SH DESCRIPTION
.PP
Typically, each physical machine in a VAST deployment runs a single \fB\fCvastd\fR
process. For single\-node deployments all actors run inside this process,
whereas cluster deployments consist of multiple nodes with actors spread across
them.
.PP
A \fB\fCvastd\fR process spawn a special \fInode\fP actor which acts as a container for
other actors. Nodes can enter a peering relationship to share global state. The
set of peering nodes constitutes a VAST \fIecosystem\fP: an overlay network in
which actors can be connected irrespective of process boundaries.
.SH OPTIONS
.PP
The following \fIoptions\fP are available:
.TP
\fB\fC\-c\fR
Start all core actors and connect them. Specifying this option automatically
executes the following commands after starting the node:
.PP
.RS
.nf
  vast spawn identifier
  vast spawn importer
  vast spawn archive
  vast spawn index
  vast connect importer identifier
  vast connect importer archive
  vast connect importer index
.fi
.RE
.TP
\fB\fC\-d\fR \fIdirectory\fP [\fIvast\fP]
The path on the file system where to store persistent state.
.TP
\fB\fC\-e\fR \fIendpoint\fP [\fI127.0.0.1:42000\fP]
The endpoint of the node to connect to or launch. (See 
.BR vast (1) 
for syntax)
.TP
\fB\fC\-f\fR
Start daemon in foreground, i.e., do not detach from controlling terminal and
run in background.
.TP
\fB\fC\-h\fR
Display a help message and exit.
.TP
\fB\fC\-l\fR \fIverbosity\fP [\fI3\fP]
The logging verbosity. (See 
.BR vast (1) 
for an explanation of values)
.TP
\fB\fC\-m\fR \fImessages\fP [\fI\-1\fP]
The CAF worker throughput expressed in the maximum number of messages to
process when a worker gets scheduled. The default value of \fI\-1\fP means an
unlimited number of messages.
.TP
\fB\fC\-n\fR \fIname\fP [\fIhostname\fP]
Overrides the node \fIname\fP, which defaults to the system hostname. Each node
in an ecosystem must have a unique name, otherwise peering fails.
.TP
\fB\fC\-p\fR \fIlogfile\fP
Enable CAF profiling of worker threads and actors and write the per\-second
sampled data to \fIlogfile\fP\&.
.TP
\fB\fC\-t\fR \fIthreads\fP [\fIstd::thread::hardware_concurrency()\fP]
The number of worker threads to use for CAF's scheduler.
.TP
\fB\fC\-v\fR
Print VAST version and exit.
.SH EXAMPLES
.PP
Start a node in the foreground with debugging logging verbosity and launch all
core actors:
.PP
.RS
.nf
vastd \-l 5 \-f \-c
.fi
.RE
.PP
Start a node at a different port with 10 worker threads:
.PP
.RS
.nf
vastd \-e :6666 \-t 10
.fi
.RE
.SH BUGS
.PP
If you encounter a bug or have suggestions for improvement, please file an
issue at 
\[la]https://github.com/mavam/vast/issues\[ra]\&.
.SH SEE ALSO
.PP
.BR vast (1)
.PP
Visit 
\[la]https://github.com/mavam/vast\[ra] for more information about VAST.

.TH VAST 1 "October 21, 2019" 0.1 "Visibility Across Space and Time"
.SH NAME
.PP
\fB\fCvast\fR \-\- manage a VAST topology
.SH SYNOPSIS
.PP
\fB\fCvast\fR [\fIoptions\fP] \fIcommand\fP [\fIarguments\fP]
.SH OVERVIEW
.SS vast
.PP
\fBVAST\fP is a platform for network forensics at scale. It ingests security
telemetry in a unified data model and offers a type\-safe search interface to
extract a data in various formats.
.PP
The \fB\fCvast\fR executable manages a VAST deployment by starting and interacting
with a \fBnode\fP, the server\-side component that manages the application state.
.SH Usage
.PP
The command line interface (CLI) is the primary way to interact with VAST.
All functionality is available in the form of \fIcommands\fP, each of which
have their own set of options:
.PP
.RS
.nf
vast [options] [command] [options] [command] ...
.fi
.RE
.PP
Commands are recursive and the top\-level root command is the \fB\fCvast\fR executable
itself. Usage follows typical UNIX applications: 
.RS
.IP \(bu 2
\fIstandard input\fP feeds data to commands
.IP \(bu 2
\fIstandard output\fP represents the result of a command
.IP \(bu 2
\fIstandard error\fP includes logging output
.RE
.PP
The \fB\fChelp\fR sub\-command always prints the usage instructions for a given
command, e.g., \fB\fCvast help\fR lists all available top\-level sub\-commands.
.SH Configuration
.PP
In addition to command options, a configuration file \fB\fCvast.conf\fR allows for
persisting option values and tweaking system parameters. Command line options
always override configuration file values.
.PP
During startup, \fB\fCvast\fR looks for a \fB\fCvast.conf\fR in the current directory. If
the file does not exist, \fB\fCvast\fR then attempts to open \fB\fCPREFIX/etc/vast.conf\fR
where \fB\fCPREFIX\fR is the installation prefix (which defaults to \fB\fC/usr/local\fR).
.SH System Architecture
.PP
VAST consists of multiple \fIcomponents\fP, each of which implement
specific system functionality. The following key componetns exist:
.TP
\fBsource\fP
Generates events by parsing a particular data format, such as packets from a
network interface, IDS log files, or generic CSV or JSON data.
.TP
\fBsink\fP
Produces events by printing them in a particular format, such as ASCII, CSV,
JSON, PCAP, or Zeek logs.
.TP
\fBarchive\fP
Stores the raw event data.
.TP
\fBindex\fP
Accelerates queries by constructing index structures that point into the
\fBarchive\fP\&.
.TP
\fBimporter\fP
Ingests events from \fBsource\fPs, assigns them unique IDs, and relays
them to \fBarchive\fP and \fBindex\fP for persistence.
.TP
\fBexporter\fP
Accepts query expressions from users, extracts events, and relays results
to \fBsink\fPs.
.SS Schematic
.PP
.RS
.nf
                +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
                | node                                       |
                |                                            |
  +\-\-\-\-\-\-\-\-+    |             +\-\-\-\-\-\-\-\-+                     |    +\-\-\-\-\-\-\-+
  | source |    |         +\-\-\->archive <\-\-\-\-\-\-+           +\-\-\-\-\-\-\-> sink  |
  +\-\-\-\-zeek+\-\-\-\-\-\-\-+      |   +\-\-\-\-\-\-\-\-<\-\-\-+  v\-\-\-\-\-\-\-\-\-\-\-++ |    +\-\-\-json+
                |  |      |                |  | exporter   | |
                | +v\-\-\-\-\-\-++           +\-\-\-\-\-\->\-\-\-\-\-\-\-\-\-\-\-\-+ |
     ...        | |importer|           |   |     ...         |      ...
                | +^\-\-\-\-\-\-++           |   |                 |
                |  |      |            |   +\-\->\-\-\-\-\-\-\-\-\-\-\-\-+ |
  +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-+      |            |      | exporter   | |
  | source |    |         |   +\-\-\-\-\-\-\-\-v      ^\-\-\-\-\-\-\-\-\-\-\-++ |    +\-\-\-\-\-\-\-+
  +\-\-\-\-pcap+    |         +\-\-\-> index  <\-\-\-\-\-\-+           +\-\-\-\-\-\-\-> sink  |
                |             +\-\-\-\-\-\-\-\-+                     |    +\-\-ascii+
                |                                            |
                |                                            |
                +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.fi
.RE
.PP
The above diagram illustrates the default configuration of a single node and
the flow of messages between the components. The \fBimporter\fP, \fBindex\fP, and
\fBarchive\fP are singleton instances within the \fBnode\fP\&. \fBSource\fPs are spawned
on demand for each data import. \fBSink\fPs and \fBexporter\fPs form pairs that are
spawned on demand for each query. \fBSource\fPs and \fBsink\fPs exist in their own
\fB\fCvast\fR processes, and are responsible for parsing the input and formatting the
search results.
.SS count
.SS export
.PP
The \fB\fCexport\fR command retrieves a subset of data according to a given query
expression. The export format must be explicitly specified:
.PP
.RS
.nf
vast export [options] <format> [options] <expr>
.fi
.RE
.PP
The \fB\fCexport\fR command is the dual to the \fB\fCimport\fR command.
.SS zeek
.PP
The Zeek \[la]https://zeek.org\[ra] export format writes events in Zeek's
tab\-separated value (TSV) style.
.SS csv
.PP
The CSV export format renders events as comma\-separated values.
.SS ascii
.PP
The ASCII export format renders events according to VAST's data grammar. It
merely dumps the data, without type information, and is therefore useful when
digging for specific values.
.SS json
.PP
The JSON export format renders events in newline\-delimited JSON (aka.
JSONL \[la]https://en.wikipedia.org/wiki/JSON_streaming#Line-delimited_JSON\[ra]).
.SS pcap
.PP
The PCAP export format uses libpcap \[la]https://www.tcpdump.org\[ra] to write PCAP
events as a trace.
.PP
This command only supports events of type \fB\fCpcap.packet\fR\&. As a result, VAST
transforms a provided query expression \fB\fCE\fR into \fB\fC#type == "pcap.packet" && E\fR\&.
.SS infer
.PP
The \fB\fCinfer\fR command attempts to derive a schema from user input. Upon success,
it prints a schema template to standard output.
.SS import
.PP
The \fB\fCimport\fR command ingests data. An optional filter expression allows for
restricing the input to matching events. The format of the imported data must
be explicitly specified:
.PP
.RS
.nf
vast import [options] <format> [options] [expr]
.fi
.RE
.PP
The \fB\fCimport\fR command is the dual to the \fB\fCexport\fR command.
.SS zeek
.PP
The Zeek \[la]https://zeek.org\[ra] import format consumes Zeek logs in tab\-separated
value (TSV) style.
.PP
Here's an example of a typical Zeek \fB\fCconn.log\fR:
.PP
.RS
.nf
#separator \\x09
#set_separator  ,
#empty_field  (empty)
#unset_field  \-
#path conn
#open 2014\-05\-23\-18\-02\-04
#fields ts  uid id.orig_h id.orig_p id.resp_h id.resp_p proto service duration  orig_bytes resp_bytes  conn_state  local_orig  missed_bytes  history orig_pkts orig_ip_bytes  resp_pkts resp_ip_bytes tunnel_parents
#types  time  string  addr  port  addr  port  enum  string  interval  count count  string  bool  count string  count count count count table[string]
1258531221.486539 Pii6cUUq1v4 192.168.1.102 68  192.168.1.1 67  udp \- 0.163820  301  300 SF  \- 0 Dd  1 329 1 328 (empty)
1258531680.237254 nkCxlvNN8pi 192.168.1.103 137 192.168.1.255 137 udp dns 3.780125 350 0 S0  \- 0 D 7 546 0 0 (empty)
1258531693.816224 9VdICMMnxQ7 192.168.1.102 137 192.168.1.255 137 udp dns 3.748647 350 0 S0  \- 0 D 7 546 0 0 (empty)
1258531635.800933 bEgBnkI31Vf 192.168.1.103 138 192.168.1.255 138 udp \- 46.725380  560 0 S0  \- 0 D 3 644 0 0 (empty)
1258531693.825212 Ol4qkvXOksc 192.168.1.102 138 192.168.1.255 138 udp \- 2.248589  348  0 S0  \- 0 D 2 404 0 0 (empty)
1258531803.872834 kmnBNBtl96d 192.168.1.104 137 192.168.1.255 137 udp dns 3.748893 350 0 S0  \- 0 D 7 546 0 0 (empty)
1258531747.077012 CFIX6YVTFp2 192.168.1.104 138 192.168.1.255 138 udp \- 59.052898  549 0 S0  \- 0 D 3 633 0 0 (empty)
1258531924.321413 KlF6tbPUSQ1 192.168.1.103 68  192.168.1.1 67  udp \- 0.044779  303  300 SF  \- 0 Dd  1 331 1 328 (empty)
1258531939.613071 tP3DM6npTdj 192.168.1.102 138 192.168.1.255 138 udp \- \- \- \- S0  \-  0 D 1 229 0 0 (empty)
1258532046.693816 Jb4jIDToo77 192.168.1.104 68  192.168.1.1 67  udp \- 0.002103  311  300 SF  \- 0 Dd  1 339 1 328 (empty)
1258532143.457078 xvWLhxgUmj5 192.168.1.102 1170  192.168.1.1 53  udp dns 0.068511 36  215 SF  \- 0 Dd  1 64  1 243 (empty)
1258532203.657268 feNcvrZfDbf 192.168.1.104 1174  192.168.1.1 53  udp dns 0.170962 36  215 SF  \- 0 Dd  1 64  1 243 (empty)
1258532331.365294 aLsTcZJHAwa 192.168.1.1 5353  224.0.0.251 5353  udp dns 0.100381 273 0 S0  \- 0 D 2 329 0 0 (empty)
.fi
.RE
.PP
When Zeek rotates
logs \[la]https://docs.zeek.org/en/stable/frameworks/logging.html#rotation\[ra], it
produces compressed batches of \fB\fC*.tar.gz\fR regularly. Ingesting a compressed
batch involves unpacking and concatenating the input before sending it to VAST:
.PP
.RS
.nf
zcat *.gz | vast import zeek
.fi
.RE
.SS mrt
.PP
The MRT \[la]https://tools.ietf.org/html/rfc6396\[ra] import format consumes binary
MRT data.
.SS bgpdump
.PP
The \fB\fCbgpdump\fR import format consumes ASCII data as rendered by the \fB\fCbgpdump\fR
utility. For example, the following command imports BGPdump data into VAST:
.PP
.RS
.nf
bgpdump \-m data | vast import bgpdump
.fi
.RE
.PP
The typical output of \fB\fCbgpdump \-m\fR looks like this: 
.PP
.RS
.nf
BGP4MP|1408579214|STATE|2a02:20c8:1f:1::4|50304|3|2
BGP4MP|1408579214|STATE|2800:9b0:0:1::1|52342|3|2
BGP4MP|1408579214|A|2001:8e0:0:ffff::9|8758|2a01:6040:27f::/48|8758 3356 3549 15194|IGP|2001:8e0:0:ffff::9|0|0|3356:2 3356:22 3356:86 3356:503 3356:601 3356:666 3356:911 3356:2067 8758:110 8758:300|NAG||
BGP4MP|1408579214|A|2607:fad8::1:3|22652|2610:1e8::/32|22652 11670 11814|IGP|2607:fad8::1:3|0|0||AG||
BGP4MP|1408579214|A|79.143.241.12|29608|157.100.228.0/24|29608 6453 6453 6453 1299 19169 27947|IGP|79.143.241.12|0|12|6453:86 6453:2000 6453:2200 6453:2203 29608:30100|NAG||
BGP4MP|1408579214|A|79.143.241.12|29608|157.100.195.0/24|29608 6453 6453 6453 1299 19169 27947|IGP|79.143.241.12|0|12|6453:86 6453:2000 6453:2200 6453:2203 29608:30100|NAG||
.fi
.RE
.SS csv
.PP
The CSV \[la]https://en.wikipedia.org/wiki/Comma-separated_values\[ra] import format
consumes comma\-separated values in tabular form. The first line in a CSV file
must contain a header that describes the field names. The remaining lines
contain concrete values. Except for the header, one line corresponds to one
event.
.PP
Because CSV has no notion of typing, it is necessary to select a layout via
\fB\fC\-\-type\fR/\fB\fC\-t\fR whose field names correspond to the CSV header field names.
.SS json
.PP
The \fB\fCjson\fR import format consumes line\-delimited
JSON \[la]https://en.wikipedia.org/wiki/JSON_streaming#Line-delimited_JSON\[ra] objects
according to a specified schema. That is, one line corresponds to one event.
The object field names correspond to record field names.
.PP
JSON's can express only a subset VAST's data model. For example, VAST has
first\-class support IP addresses but JSON can only represent them as strings.
To get the most out of your data, it is therefore important to define a schema
to get a differentiated view of the data.
.PP
The \fB\fCinfer\fR command also supports schema inference for JSON data. For example,
\fB\fChead data.json | vast infer\fR will print a raw schema that can be supplied to
\fB\fC\-\-schema\-file\fR/\fB\fC\-s\fR as file or to \fB\fC\-\-schema\fR/\fB\fC\-S\fR as string. However, after
\fB\fCinfer\fR dumps the schema, the generic type name should still be adjusted and
this would be the time to annotate fields with additional attributes, such as
\fB\fC#timestamp\fR or \fB\fC#skip\fR\&.
.SS suricata
.PP
The \fB\fCsuricata\fR import format consumes
EVE \[la]https://suricata.readthedocs.io/en/latest/output/eve/eve-json-output.html\[ra]
JSON logs from Suricata \[la]https://suricata-ids.org\[ra]\&. EVE is output is
Suricata's unified format to log all types of activity as single stream of
line\-delimited JSON \[la]https://en.wikipedia.org/wiki/JSON_streaming#Line-delimited_JSON\[ra]\&.
.PP
For each log entry, VAST parses the field \fB\fCevent_type\fR to determine the
specific record type and then parses the data according to the known schema.
.PP
.RS
.nf
vast import suricata < eve.log
.fi
.RE
.SS test
.PP
The \fB\fCtest\fR format exists primarily for testing and benchmarking purposes. It
generates random data for a given schema.
.SS pcap
.PP
The PCAP import format uses libpcap \[la]https://www.tcpdump.org\[ra] to read
network packets from a trace or an interface.
.SS kill
.SS peer
.SS send
.SS spawn
.SS accountant
.SS archive
.SS exporter
.SS importer
.SS index
.SS consensus
.SS profiler
.SS source
.SS pcap
.SS test
.SS zeek
.SS bgpdump
.SS mrt
.SS sink
.SS pcap
.SS zeek
.SS ascii
.SS csv
.SS json
.SS start
.PP
The \fB\fCstart\fR command spins up a VAST node. Starting a node is the first step
when deploying VAST as a continuously running server. The process runs in the
foreground and uses standard error for logging. Standard output remains unused.
.SS status
.PP
The \fB\fCstatus\fR command dumps VAST runtime state in JSON format.
.SS stop
.PP
The \fB\fCstop\fR command brings down a VAST node.
.SS version
.PP
The \fB\fCversion\fR command prints the version of the VAST executable.
.SH ISSUES
.PP
If you encounter a bug or have suggestions for improvement, please file an
issue at \[la]http://vast.fail\[ra]\&.
.SH SEE ALSO
.PP
Visit \[la]http://vast.io\[ra] for more information about VAST.

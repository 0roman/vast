name: "VAST"
on:
  push:
    paths-ignore:
    - '**.md'
    - '!doc/**.md'
env:
  DEBIAN_FRONTEND: noninteractive
jobs:
  style:
    name: Style Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        ref: ${{ github.ref }}
    - uses: actions/setup-python@v1
      with:
        python-version: '3.7'

    - name: Clang Format
      run: |
        pip install --upgrade pip clang-format
        git diff -U0 --no-color $(git merge-base origin/master HEAD) |
          scripts/clang-format-diff.py -p1

    - name: CMake Format
      run: |
        pip install --upgrade pip "cmake_format==0.6.5"
        git diff --name-only --no-color --diff-filter=ACM $(git merge-base origin/master HEAD) -- "**CMakelists.txt" "**.cmake" |
          xargs cmake-format --in-place
        git diff --exit-code

    - name: Black
      run: |
        pip install --upgrade pip black
        # Note: black fails when it doesn't have to do anything.
        git diff --name-only --no-color --diff-filter=ACM $(git merge-base origin/master HEAD) |
          grep -v '.json$' |
          2>/dev/null xargs black || true
        git diff --exit-code

  build:
    name: ${{ matrix.os.tag }} ${{ matrix.configure.tag }}
    needs: style
    strategy:
      matrix:
        os:
        - tag: macOS
          name: macos-latest
          cc: clang
          cxx: clang++
          extra-flags:
        - tag: Ubuntu
          name: ubuntu-latest
          cc: gcc-8
          cxx: g++-8
          extra-flags: --without-arrow
        configure:
        - tag: Release
          flags: --release
        - tag: Debug
          flags: --debug
    runs-on: ${{ matrix.os.name }}
    env:
      CC: ${{ matrix.os.cc }}
      CXX: ${{ matrix.os.cxx }}
      BUILD_DIR: build
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
          ref: ${{ github.ref }}
      - uses: actions/setup-python@v1
        with:
          python-version: '3.7'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Install Ubuntu Dependencies
        if: matrix.os.tag == 'Ubuntu'
        run: |
          sudo apt-get -qq update && sudo apt-get -qqy install \
          gcc-8 g++-8 ninja-build libbenchmark-dev libpcap-dev libssl-dev \
          libatomic1
          pip install --upgrade pip
          pip install --upgrade cmake
          which cmake
          cmake --version

      - name: Install macOS Dependencies
        if: matrix.os.tag == 'macOS'
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ github.token }}
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
        run: |
          brew install openssl cmake git ninja python libpcap jq tcpdump rsync pandoc apache-arrow awscli pkg-config

      - name: Configure Environment
        id: configure_env
        run: |
          PACKAGE_NAME="$(echo "vast-$(git describe)-$(uname -s)-${{ matrix.configure.tag }}" | awk '{ print tolower($0) }')"
          BUILD_DIR="build"
          ## the upload artifact action cannot resolve environment variables
          echo "::set-output name=package_name::$PACKAGE_NAME"
          echo "::set-output name=build_dir::$BUILD_DIR"
          echo "::set-env name=PACKAGE_NAME::$PACKAGE_NAME"
          echo "::set-env name=BUILD_DIR::$BUILD_DIR"

      - name: Configure
        run: |
          python --version
          pip --version
          "$CC" --version
          "$CXX" --version
          ./configure \
            --generator=Ninja \
            --prefix="${PWD}/opt/vast" \
            --build-dir="$BUILD_DIR" \
            --package-name="$PACKAGE_NAME" \
            ${{ matrix.os.extra-flags }} \
            ${{ matrix.configure.flags }}

      - name: Compile All Targets
        run: |
          cmake --build "$BUILD_DIR" --target all

      - name: Run Unit Tests
        run: |
          cmake --build "$BUILD_DIR" --target test

      - name: Run Integration Tests
        run: |
          if ! cmake --build "$BUILD_DIR" --target integration; then
            tar -czf "$PACKAGE_NAME.tar.gz" -C build vast-integration-test
            exit 1
          fi

      - name: Upload Integration Test Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: "${{ steps.configure_env.outputs.package_name }}.tar.gz"
          path: "${{ steps.configure_env.outputs.package_name }}.tar.gz"

      - name: Install
        run: |
          cmake --build "$BUILD_DIR" --target install

      - name: Package
        env:
          DESTDIR: $PWD
        run: |
          cmake --build "$BUILD_DIR" --target package

      - name: Upload Artifact to Github
        uses: actions/upload-artifact@v1
        with:
          name: "${{ steps.configure_env.outputs.package_name }}.tar.gz"
          path: "${{ steps.configure_env.outputs.build_dir }}/${{ steps.configure_env.outputs.package_name }}.tar.gz"

      - name: Upload Artifact to S3
        if: github.ref == 'refs/heads/master'
        run: |
          aws s3 cp "$BUILD_DIR/$PACKAGE_NAME.tar.gz" ${{ secrets.AWS_ARTIFACT_BUCKET }}

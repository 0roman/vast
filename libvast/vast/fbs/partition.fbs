include "uuid.fbs";
include "version.fbs";
include "synopsis.fbs";

namespace vast.fbs.v0;

table ValueIndex {
  /// The type of the index.
  // TODO: This is currently deduced implicitly from the `combined_layout` of
  // the `Partition`. Once available, we want to use the `Type` flatbuffer here
  // so all relevant information is available.
  // type: Type;

  /// The serialized `vast::value_index`.
  data: [ubyte];
}

table QualifiedValueIndex {
  /// The full-qualified field name, e.g., "zeek.conn.id.orig_h".
  qualified_field_name: string;

  /// The value index for the given field.
  index: ValueIndex;
}

/// Stores the ids of a given type in the current partition.
/// Used to answer queries like `#type == "foo"`.
table TypeIds {
  /// The type name.
  name: string;

  /// The serialized `vast::ids`.
  ids: [ubyte];
}

/// A partition is a collection of indices for some id range.
table Partition {
  version: Version;

  /// The UUID of this partition.
  uuid: UUID;

  /// The first ID in the partition.
  offset: uint64;

  /// The number of contained events.
  events: uint64;

  /// The available layouts in this partition.
  combined_layout: [ubyte];

  /// A map storing the mapping from type name -> ids
  type_ids: [TypeIds];

  /// The contained value indexes.
  indexes: [QualifiedValueIndex];
}

namespace vast.fbs.v1;

/// A partition is a collection of indices and column synopses for some
/// id range.
table Partition {
  /// The UUID of this partition.
  uuid: v0.UUID;

  /// The first ID in the partition.
  offset: uint64;

  /// The number of contained events.
  events: uint64;

  /// The available layouts in this partition.
  /// TODO: Use the layout type once available.
  combined_layout: [ubyte];

  /// A map storing the mapping from type name -> ids
  type_ids: [v0.TypeIds];

  /// Various synopsis structures for partition-wide synopses of certain
  /// columns. (eg. global min and max timestamp)
  partition_synopsis: v0.PartitionSynopsis;

  /// The contained value indexes.
  indexes: [v0.QualifiedValueIndex];
}

namespace vast.fbs;

union PartitionUnion {
  v0.Partition,
  v1.Partition,
}

table Partition {
  versioned_partition: PartitionUnion;
}

root_type Partition;

file_identifier "VSTp";

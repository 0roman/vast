namespace vast.fbs.table_slice.generic;

/// The format of the binary table slice data.
enum Encoding : byte {
  Arrow,
  CAF,
  MessagePack,
}

/// A table slice whose encoding is determined at runtime.
table v0 {
  /// The offset in the 2^64 ID event space.
  offset: ulong;

  /// The number of events (= rows).
  rows: ulong;

  /// The schema of the data.
  layout: [ubyte];

  /// The format of the data.
  encoding: Encoding;

  /// The binary data.
  data: [ubyte];
}

namespace vast.fbs.table_slice;

/// A sum type containing all versions of all encodings of a table slice.
union TableSlice {
  generic.v0,
}

namespace vast.fbs;

/// A horizontal partition of a table. A slice defines a tabular interface for
/// accessing homogenous data independent of the concrete carrier format.
table TableSlice {
  table_slice: table_slice.TableSlice;
}

/// A vector of bytes that wraps a table slice.
/// @note The extra wrapping makes it possible to append existing table slices
/// as blobs to a segment builder. For example, this happens when the archive
/// receives a stream of table slices. Without the wrapping, we'd have to go
/// through a new table slice builder for every slice.
table TableSliceBuffer {
  data: [ubyte] (nested_flatbuffer: "TableSlice");
}

root_type TableSlice;

file_identifier "vTBS";

namespace vast.fbs.opaque_synopsis;

table v0 {
  /// The serialized synopsis as produced by `caf::serialize()`.
  data: [ubyte];
}

// Not sure if its worth it to make extra types for `address_synopsis` and
// `string_synopsis`, we know the type anyways from the layout and the fields
// would be exactly the same.
namespace vast.fbs.bloom_synopsis;

struct bloom_params {
  m: int64;
  n: int64;
  k: int64;
  p: double;
}

table v0 {
  size: uint64;
  params: bloom_params;
  data: [uint64]; // guaranteed to be little-endian on all platforms
}

// A bloom_synopsis currently always uses `double_hasher<HashFunction>` and a
// `no_partitioning` policy, so the only free parameter is the hash function.
enum hasher_type : byte {
  xxhash64,    
  // [...]
}

namespace vast.fbs.address_synopsis;

table v0 {
  hasher: bloom_synopsis.hasher_type;
  filter: bloom_synopsis.v0;  
}

namespace vast.fbs.string_synopsis;

table v0 {
  hasher: bloom_synopsis.hasher_type;
  filter: bloom_synopsis.v0;  
}

namespace vast.fbs.time_synopsis;

struct v0 {
  /// The earliest timestamp in this column, in nanoseconds since epoch.
  start: int64;

  /// The latest timestamp in this column, in nanoseconds since epoch.
  end: int64;
}

namespace vast.fbs.bool_synopsis;

struct v0 {
  /// Whether this column has any "true" value.
  any_true: bool;

  /// Whether this column has any "false" value.
  any_false: bool;
}

namespace vast.fbs.synopsis;

table v0 {
  /// The caf-serialized record field for this synopsis.
  /// If the name is blank, this is interpreted as a type synopsis.
  // TODO: Use the `Type` flatbuffer once available.
  qualified_record_field: [ubyte];

  /// Synopsis for a bool column.
  bool_synopsis: bool_synopsis.v0;

  /// Synopsis for a time column.
  time_synopsis: time_synopsis.v0;

  /// Other synopsis type with no native flatbuffer layout.
  opaque_synopsis: opaque_synopsis.v0;

  /// FIXME: make a synopsis.v1 table for this
  address_synopsis: address_synopsis.v0;
}

namespace vast.fbs.partition_synopsis;

table v0 {
  /// Synopses for individual fields.
  // TODO: Split this into separate vectors for field synopses
  // and type synopses.
  synopses: [synopsis.v0];
}

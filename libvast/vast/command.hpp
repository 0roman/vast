/******************************************************************************
 *                    _   _____   __________                                  *
 *                   | | / / _ | / __/_  __/     Visibility                   *
 *                   | |/ / __ |_\ \  / /          Across                     *
 *                   |___/_/ |_/___/ /_/       Space and Time                 *
 *                                                                            *
 * This file is part of VAST. It is subject to the license terms in the       *
 * LICENSE file found in the top-level directory of this distribution and at  *
 * http://vast.io/license. No part of VAST, including this file, may be       *
 * copied, modified, propagated, or distributed except according to the terms *
 * contained in the LICENSE file.                                             *
 ******************************************************************************/

#pragma once

#include <iosfwd>
#include <memory>
#include <string>
#include <string_view>

#include <caf/config_option_set.hpp>
#include <caf/error.hpp>
#include <caf/fwd.hpp>

namespace vast {

/// A named command with optional children.
class command {
public:
  // -- member types -----------------------------------------------------------

  /// Iterates over CLI arguments.
  using argument_iterator = std::vector<std::string>::const_iterator;

  /// Stores child commands.
  using children_list = std::vector<std::unique_ptr<command>>;

  /// Delegates to the command implementation logic.
  using fun = caf::message (*)(const command&, caf::actor_system&,
                               caf::settings&, argument_iterator,
                               argument_iterator);

  /// Builds config options for the same category.
  class opts_builder {
  public:
    explicit opts_builder(std::string_view category) : category_(category) {
      // nop
    }

    opts_builder(std::string_view category, caf::config_option_set xs)
      : category_(category), xs_(std::move(xs)) {
      // nop
    }

    /// Adds a config option to the category.
    template <class T>
    opts_builder&& add(std::string_view name, std::string_view description) && {
      xs_.add(caf::make_config_option<T>(category_, name, description));
      return std::move(*this);
    }

    /// Extracts the options from this builder.
    caf::config_option_set finish() {
      return std::move(xs_);
    }

  private:
    /// Category for all options generated by this adder.
    std::string_view category_;

    /// Our set-under-construction.
    caf::config_option_set xs_;
  };

  /// Wraps invocation of a single command for separating the parsing of
  /// program argument from running the command.
  struct invocation {
    // -- member variables -----------------------------------------------------

    /// Stores user-defined program options.
    caf::settings options;

    /// Points to the scheduled command.
    const command* target = nullptr;

    /// Points to the first CLI argument.
    argument_iterator first;

    /// Points past-the-end of CLI arguments.
    argument_iterator last;

    // -- mutators -------------------------------------------------------------

    /// Sets the members `target`, `first`, and `last`.
    void assign(const command* cmd, argument_iterator first,
                argument_iterator last) {
      target = cmd;
      this->first = first;
      this->last = last;
    }
  };

  // -- member variables -------------------------------------------------------

  /// A pointer to the parent node (or nullptr iff this is the root node).
  command* parent = nullptr;

  fun callback = nullptr;

  /// The name of the command.
  std::string_view name;

  /// A short phrase that describes the command, e.g., "prints the help text".
  std::string_view description;

  /// Detailed usage instructions written in Markdown.
  std::string_view documentation;

  /// The options of the command.
  caf::config_option_set options = opts();

  /// The list of sub-commands.
  children_list children;

  /// Flag that indicates whether the command shows up in the help text.
  bool visible = true;

  // -- factory functions ------------------------------------------------------

  /// Creates a config option set pre-initialized with a help option.
  static caf::config_option_set opts();

  /// Creates a config option set pre-initialized with a help option.
  static opts_builder opts(std::string_view category);

  /// Adds a new subcommand.
  /// @returns a pointer to the new subcommand.
  command*
  add(std::string_view child_name, caf::config_option_set child_options = {});

  /// Adds a new subcommand.
  /// @returns a pointer to the new subcommand.
  inline command*
  add(std::string_view child_name, opts_builder&& child_options) {
    return add(child_name, child_options.finish());
  }

  /// Adds a description to a command.
  /// @returns a pointer to this command.
  inline command* describe(std::string_view desc) {
    description = desc;
    return this;
  }
  //
  /// Adds a Markdown-formatted documentation to a command.
  /// @returns a pointer to this command.
  inline command* document(std::string_view doc) {
    documentation = doc;
    return this;
  }

  /// Hides the command from the help text.
  /// @returns a pointer to this command.
  inline command* hide() {
    visible = false;
    return this;
  }

  /// Sets the callback for this command.
  /// @returns a pointer to this command.
  inline command* run(fun run) {
    callback = run;
    return this;
  }
};

/// Parses all program arguments without running the command.
/// @returns an error for malformed input, `none` otherwise.
/// @relates command
caf::expected<command::invocation> parse(const command& root, command::argument_iterator first,
                          command::argument_iterator last);

/// Prepares `cfg` before using it to initialize an `actor_system` with it.
/// This includes: (1) merging all settings from parsed CLI settings to `cfg`,
/// (2) setting up the log file, and (3) overriding CAF settings with system
/// settings where necessary, e.g., `system.verbosity` overrides
/// `logger.console-verbosity`.
/// @param cfg The config that should reflect all settings in `from`.
/// @param from Result of parsed CLI arguments.
/// @param error_output Destination for writing human-readable error output.
///                     Only used when returning `false`.
/// @returns `true` if all steps were successful, otherwise `false`.
bool init_config(caf::actor_system_config& cfg, const command::invocation& from,
                 std::ostream& error_output);

/// Runs the command and blocks until execution completes.
/// @returns a type-erased result or a wrapped `caf::error`.
/// @relates command
caf::expected<caf::message> run(command::invocation& invocation, caf::actor_system& sys);

/// Runs the command and blocks until execution completes.
/// @returns a type-erased result or a wrapped `caf::error`.
/// @relates command
caf::expected<caf::message> run(const command& cmd, caf::actor_system& sys,
                 command::argument_iterator first,
                 command::argument_iterator last);

/// Runs the command and blocks until execution completes.
/// @returns a type-erased result or a wrapped `caf::error`.
/// @relates command
caf::expected<caf::message> run(const command& cmd, caf::actor_system& sys,
                 const std::vector<std::string>& args);

/// Runs the command and blocks until execution completes.
/// @returns a type-erased result or a wrapped `caf::error`.
/// @relates command
caf::expected<caf::message> run(const command& cmd, caf::actor_system& sys,
                 caf::settings predefined_options,
                 command::argument_iterator first,
                 command::argument_iterator last);

/// Runs the command and blocks until execution completes.
/// @returns a type-erased result or a wrapped `caf::error`.
/// @relates command
caf::expected<caf::message> run(const command& cmd, caf::actor_system& sys,
                 caf::settings predefined_options,
                 const std::vector<std::string>& args);

/// Traverses the command hierarchy until finding the root.
/// @returns the root command.
const command& root(const command& cmd);

/// Gets a subcommand from its full name.
/// @param cmd The parent to search for *position.
/// @param position The next subcommand to resolve.
/// @param end The position after the last subcommand name.
/// @returns A pointer to the corresponding command on success, or nullptr
///          on error.
/// @relates command
const command* resolve(const command& cmd,
                       std::vector<std::string_view>::iterator position,
                       std::vector<std::string_view>::iterator end);

/// Gets a subcommand from its full name.
/// @param cmd The parent to search for *position.
/// @param name A whitespace separated sequence of subcommands.
/// @returns A pointer to the corresponding command on success, or nullptr
///          on error.
/// @relates command
const command* resolve(const command& cmd, std::string_view name);

/// Returns the full name of `cmd`, i.e., its own name prepended by all parent
/// names.
std::string full_name(const command& cmd);

/// Prints the helptext for `cmd` to `out`.
void helptext(const command& cmd, std::ostream& out);

/// Returns the helptext for `cmd`.
std::string helptext(const command& cmd);

/// Prints the documentationtext for `cmd` to `out`.
void documentationtext(const command& cmd, std::ostream& out);

/// Returns the documentationtext for `cmd`.
std::string documentationtext(const command& cmd);

/// Applies `fun` to `cmd` and each of its children, recursively.
template <class F>
void for_each(const command& cmd, F fun) {
  fun(cmd);
  for (auto& ptr : cmd.children)
    for_each(*ptr, fun);
}

} // namespace vast

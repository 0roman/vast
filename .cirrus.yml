style_task:
  container:
    dockerfile: .ci/debian/Dockerfile
    cpu: 1
    memory: 1G
  clang-format_script:
    - git fetch origin master
    - git diff -U0 --no-color $(git merge-base origin/master HEAD) | scripts/clang-format-diff.py -p1


.build_template: &build_definition
  depends_on:
    - style
  env:
    PREFIX: /opt/tenzir
    UPLOAD_KEY: "ENCRYPTED[b9aebb47f0f45d1af07797a742e7469835cac15ceb40ca1e5a82fe32c27435944990f7918a9ac0e9bbdcb7d9267a1e6d]"
  fingerprint_script:
    - git fetch origin
    - export PACKAGE_NAME="$(date +%Y-%m-%d)-VAST-$(git describe)-$(uname -s)-$BUILD_TYPE"
    - echo "$PACKAGE_NAME" > PACKAGE_NAME
    - export ARTIFACT_NAME="VAST-$CIRRUS_PR-$(uname -s)-$BUILD_TYPE-$CIRRUS_CHANGE_IN_REPO"
    - echo "$ARTIFACT_NAME" > ARTIFACT_NAME
    - echo "$UPLOAD_KEY" | base64 --decode > upload_key && chmod 600 upload_key
    - cat PACKAGE_NAME
    - cmake --version
    - ${CXX} --version
    - python --version
  submodule_script:
    - git submodule update --init aux/caf
    - git submodule update --init aux/broker/broker
    - git -C aux/broker/broker submodule update --init 3rdparty
  build_script:
    - cmake -Bbuild -H. -DCMAKE_INSTALL_PREFIX="$PREFIX"
      -DCMAKE_BUILD_TYPE="$BUILD_TYPE" -DCPACK_GENERATOR=TGZ
      -DCPACK_PACKAGE_FILE_NAME="$(cat PACKAGE_NAME)"
      -DCPACK_SET_DESTDIR=ON "$CONFIGURE_FLAGS" -G Ninja
    - cmake --build build --target all --parallel
  unit_test_script:
    - cmake --build build --target test --parallel
  integration_test_script: >
    if ! cmake --build build --target integration --parallel; then
      tar -czf "$(cat ARTIFACT_NAME).tar.gz" -C build vast-integration-test
      rsync --archive --compress --rsh "ssh -i upload_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
        --progress "$(cat ARTIFACT_NAME).tar.gz" mule@tenzir.dfn-cert.de:/home/mule/integration/vast/
      echo "Download with: \`scp tenzir.dfn-cert.de:/home/mule/integration/vast/$(cat ARTIFACT_NAME).tar.gz .\`"
      false
    fi
  install_script:
    - cmake --build build --target install --parallel
  package_script:
    - cmake --build build --target package --parallel
  upload_script: >
    if [ "$CIRRUS_BRANCH" = "master" ]; then
      rsync --archive --compress --rsh "ssh -i upload_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
        --progress "build/$(cat PACKAGE_NAME).tar.gz" mule@tenzir.dfn-cert.de:/home/mule/artifacts/
    fi

debian_task:
  name: Debian
  container:
    dockerfile: .ci/debian/Dockerfile
    cpu: 6
    memory: 24G
  env:
    CC: gcc-8
    CXX: g++-8
    matrix:
      - BUILD_TYPE: Release
      - BUILD_TYPE: Debug
        CONFIGURE_FLAGS: -DENABLE_ADDRESS_SANITIZER:BOOL=ON
  <<: *build_definition

freebsd_task:
  name: FreeBSD
  freebsd_instance:
    image: freebsd-12-0-release-amd64
    cpu: 6
    memory: 24G
  env:
    CC: cc
    CXX: c++
    matrix:
      - BUILD_TYPE: Release
      - BUILD_TYPE: Debug
        CONFIGURE_FLAGS: -DENABLE_ADDRESS_SANITIZER:BOOL=ON
  setup_script:
    - env ASSUME_ALWAYS_YES=YES pkg install git cmake ninja lang/python3 lang/python py36-pip base64 jq tcpdump
  <<: *build_definition

macos_task:
  name: macOS - Release
  osx_instance:
    image: mojave-xcode-10.2
  env:
    CC: cc
    CXX: c++
    BUILD_TYPE: Release
    PATH: /usr/local/opt/python/libexec/bin:$PATH
    DESTDIR: "$PWD"
  setup_script:
    - HOMEBREW_NO_AUTO_UPDATE=1 brew install openssl cmake git ninja python libpcap jq tcpdump
  <<: *build_definition
